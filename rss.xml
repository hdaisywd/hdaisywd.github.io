<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[이제는! 더이상! 물러날 곳이 없다!]]></description><link>https://www.dahhong.com</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 28 Jul 2024 14:11:56 GMT</lastBuildDate><item><title><![CDATA[🔐 바보갓은 내가 정리해본 jwt를 이용한 로그인에 대한 글]]></title><description><![CDATA[…]]></description><link>https://www.dahhong.com/what_is_jwt/</link><guid isPermaLink="false">https://www.dahhong.com/what_is_jwt/</guid><pubDate>Sun, 28 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VWol1Ny.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;안녕하세요? 이번 프로젝트르 하며 로그인을 구현하게 되었습니다. 처음 해보는 터라 공부를 하며 해보았는데요.. 그 과정에 대해 글을 작성해보려 합니다!&lt;/p&gt;
&lt;h2&gt;🔑 문제 상황&lt;/h2&gt;
&lt;p&gt;로그인을 구현하려면 다음과 같이 진행이 됩니다.&lt;/p&gt;
&lt;p&gt;👨🏻‍💻 사용자가 로그인 요청을 보낸다.&lt;br&gt;
🗄️ 서버는 사용자의 정보를 확인하고 로그인 성공 응답을 보내준다.&lt;/p&gt;
&lt;p&gt;간단합니다. 그러나 문제는 HTTP는 &lt;strong&gt;스테이트리스(stateless) 프로토콜&lt;/strong&gt;이라는 것입니다. 이게 무슨 뜻이냐 하면 이미 지나간 요청과 응답의 상태를 기억하고 있지 않다는 뜻입니다. 가령 위의 과정을 거쳐 로그인을 성공해도 다른 페이지로 넘어가면 로그인을 했었는지 기억을 못하고 다시 로그인 요구를 한다는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/JltuIcQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;페이지를 넘기거나, 새로고침을 하면 계속 님 누구냐고 물어본다..? 유저 이탈률 100%를 찍을 듯 합니다.. 이를 해결하기 위해 등장한 것이 jwt 토큰인데요!&lt;/p&gt;
&lt;h2&gt;🔑  jwt란 무엇인가?&lt;/h2&gt;
&lt;p&gt;jwt는 &lt;strong&gt;JSON Web Token&lt;/strong&gt;의 약자로 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7519&quot;&gt;RFC&lt;/a&gt; 규격에 의해 정의되어 있는데요! 바로 JSON 객체에 인증에 필요한 정보를 담아서 비밀키로 서명한 토큰을 생성하는 기술입니다. jwt를 이용한 로그인 과정이 어떻냐하면 이렇습니다.&lt;/p&gt;
&lt;p&gt;👨🏻‍💻  사용자가 로그인 요청을 보낸다.&lt;br&gt;
🗄️ 서버는 secret key를 사용해 jwt token을 생성하고 이를 헤더에 담아 클라이언트에게 보낸다.&lt;/p&gt;
&lt;p&gt;위의 과정과 무엇이 다르냐하면 바로 jwt token을 발급해주는 곳이 다릅니다. 이를 이해하기 위해서는 아래의 약간의 선수 지식이 필요한데요.. 잠깐 짚고 넘어가겠습니다.&lt;/p&gt;
&lt;h4&gt;🤔 세션 기반 인증 vs 토큰 기반 인증&lt;/h4&gt;
&lt;p&gt;둘의 용도는 같습니다. 바로 사용자가 계속해서 로그인을 하며 본인을 &lt;strong&gt;나 유효한 사용자야ㅠㅠ!!&lt;/strong&gt; 하고 서버에게 증명하기 않도록 도와준다는 점입니다.&lt;/p&gt;
&lt;h5&gt;세션 기반 인증&lt;/h5&gt;
&lt;p&gt;세션이란 &lt;strong&gt;브라우저와의 통신이 끝날때까지 사용자의 요청을 모두 하나의 상태로 보고 상태를 유지시키는 기술&lt;/strong&gt;입니다.  세션 기반 인증을 그림으로 나타내면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zOVBedm.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;👨🏻‍💻 사용자가 로그인 요청을 보낸다.&lt;br&gt;
🗄️ 서버는 사용자의 정보를 확인하고 세션 객체를 생성하여 세션 id를 쿠키 (요청헤더)에 담아서 보낸다.&lt;br&gt;
👨🏻‍💻 또다시 요청을 보낸다. 이번엔 쿠키에 세션 id가 담겨있다.&lt;/p&gt;
&lt;p&gt;즉, 서버가 사용자의 로그인 상태를 기억하고 있는 것입니다. 따라서 세션 기반 인증은 stateful 합니다. 당연히 장단점은 존재합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트가 임의로 정보를 조작하기 어렵습니다.&lt;/li&gt;
&lt;li&gt;중간에 탈취를 당해도 서버의 정보와 대조를 하기에 비교적 안전합니다.&lt;/li&gt;
&lt;li&gt;서로 다른 기기에서 중복 로그인 시 인가를 취소할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트수가 많을 경우 메모리 혹은 DB의 부하가 올 수 있습니다.&lt;/li&gt;
&lt;li&gt;DB가 여러개일 경우 DB간 세션을 공유하는 것이 어려워집니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🔑  토큰 기반 인증&lt;/h2&gt;
&lt;p&gt;그럼 다시 jwt로 돌아와서 토큰 기반 인증에 대해 얘기해보겠습니다!&lt;br&gt;
토큰 방식은 세션과 다르게 &lt;strong&gt;stateless&lt;/strong&gt;합니다. 즉, 서버가 사용자의 로그인 여부에 대한 정보를 기억하고 있지 않습니다. 작동반식은 이렇습니다.&lt;/p&gt;
&lt;p&gt;👨🏻‍💻 사용자가 로그인 요청을 보낸다.&lt;br&gt;
🗄️ 암호키를 이용해 jwt 토큰을 생성해서 보낸다.&lt;br&gt;
👨🏻‍💻 브라우저에 token을 저장한다. 또다시 서버에 토큰과 함께 요청을 보낸다.&lt;br&gt;
🗄️ 암호키로 token을 해석하여 로그인 정보가 일치하고 유호기간이 남아있으면 인가를 허가한다.&lt;/p&gt;
&lt;p&gt;그렇다면  jwt token은 어떻게 생겼냐! 하는걸 한 번 봐보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4NNm6uZ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;payload에는 누가 누구에게 토큰을 발급했는지, 언제까지 유효한지, 닉네임은 무엇인지 등등 사용자가 서버에 알리고자 하는 정보들(Claim)이 들어있습니다. 그런데 이거 척 봐도 클라이언트가 조작하면 웁스바리.. 되게 생겼습니다. 이를 해결하고자 하는게 헤더인데요!&lt;/p&gt;
&lt;p&gt;헤더에는 서명 에 사용할 키, 토큰 유형 (jwt를 사용하는 경우 무조건 jwt로 설정이 됩니다.), 서명 암호화 알고리즘의 정보가 담겨 있습니다. 그리고 이 알고리즘은 서버의 비밀키를 이용한 것이죠. 즉, 서버의 비밀키가 없으면 서명부분(signature)를 임의로 생성할 수 없습니다.  &lt;a href=&quot;https://jwt.io/&quot;&gt;여기&lt;/a&gt;에서 만들어보면서 시험해 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;근데 여기서 잠깐.. 또.. 딱 봐도 토큰을 누군가 탈취해가면 이거 큰일나게 생겼습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/JTyywa1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이를 해결하기 위해 등장한 것이 바로 &lt;code&gt;access token&lt;/code&gt;과 &lt;code&gt;refresh token&lt;/code&gt; 인데요!&lt;/p&gt;
&lt;h5&gt;🎫 access token &amp;#x26; refresh token&lt;/h5&gt;
&lt;p&gt;로그인에 성공하면 브라우저는 access token과 refresh token 두가지를 발급받게 되는데요! Access token은 그 수명이 굉장히 짧습니다. 그래서 금방 금방 만료가 됩니다. 그렇게 되면 브라우저는 서버에 refresh token을 보내게 됩니다.&lt;/p&gt;
&lt;p&gt;이 &lt;code&gt;refresh token&lt;/code&gt;은 긴 수명기간을 가지고 있는데요! 이 친구를 제시하면 서버에서 다시 access token을 발급해줍니다. 그러면 누군가가 access token을 탈취해도 금방 만료가 되어 사용할 수 없는 것입니다.&lt;/p&gt;
&lt;p&gt;🦹‍♂️ 그렇다고 포기할테냐..? 어림도 없지 refresh token 탈취..!! 하면 어떻게 하느냐. 바로 &lt;strong&gt;Refresh Token Rotation&lt;/strong&gt;을 사용합니다. access token 재발급시 매번 refresh token도 새로 발급받는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버가 기억하고 있지 않아도 되기때문에 서버에 부담이 적습니다.&lt;/li&gt;
&lt;li&gt;구현이 쉽고 빠릅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상대적으로 보안이 취약합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🔑 그래서 뭐 어떡하라고..?&lt;/h2&gt;
&lt;p&gt;저는 프로젝트에 jwt를 이용해 구현하기로 했습니다. 작은 사이드 프로젝트인 만큼 빠르게 구현하고 싶었기 때문입니다. 그러나 보안에 대한 취약점을 고려하지 않고 마구마구 코딩을 한다면.. 꽤나 무능한 개발자같고.. 그래서 고려해야 할 보안 사항들을 한 번 적어봅시다!&lt;/p&gt;
&lt;h4&gt;1. XXR (Cross-Site Scripting) 공격&lt;/h4&gt;
&lt;p&gt;크로스 사이트 스크립팅은 부정한 HTML 태그나 javascript를 동작시키는 공격입니다. html이 동적으로 생성될 때 가장 큰 문제가 생길 수 있는데요! 이때 폼에 악성 스크립트를 설치해두면 아이디나 패스워들르 그대로 탈취당할 수도 있고 .. 또 악성 스크립트를 사용해 쿠키를 탈취할 수도 있습니다.&lt;/p&gt;
&lt;h4&gt;2. CSRF(Cross-Site Request Forgery) 공격&lt;/h4&gt;
&lt;p&gt;크로스 사이트 리퀘스트 포저리는 유저가 의도하지 않은 개인 정보나 설정 정보등을 공격자가 설치해둔 함정에 의해 어떤 상태를 갱신하는 처리를 강제로 실행시키는 공격입니다. 이게 무슨 말이냐.. 하면! 로그인을 하고 인가를 받은 유저가 자기가 하지도 않은 행동을 하게 한다는 것입니다. 예를 들어 인증된 유저만 사용할 수 있는 게시판에 글을 쓴다던가.. 하는 것입니다.&lt;/p&gt;
&lt;p&gt;아무튼.. 토큰 기반 인증 방식은 브라우저에 저장을 하게 되는데요! 이때 저장하는 위치가 보안에 큰 영향을 끼치는 것 같습니다.&lt;/p&gt;
&lt;h2&gt;🔑 브라우저의 어디에 저장을 해야할까?&lt;/h2&gt;
&lt;p&gt;바로 &lt;code&gt;cookie&lt;/code&gt;와 &lt;code&gt;localStorage&lt;/code&gt; 그리고 &lt;code&gt;secure httpOnly cookie&lt;/code&gt;가 있습니다. 그러나 둘 모두 위의 공격에 취약할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;localStorage 저장 반식&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;딱 봐도 취약해보입니다. Javascript의 Window 인터페이스를 통해 접근이 가능합니다. 그러면..? XSS 공격개시..  javascript를 동작시켜서 탈취를 할 수 있습니다.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;쿠키 저장 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;문제는 쿠키도 javascript 내 글로벌 변수로 읽기 / 쓰기가 가능하다는 것입니다. 역시나 XSS 공격에 취약합니다. 또 CSRF 공격에도 취약합니다. 유저 권한으로 정보를 가져오거나 유저인 척 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;그러나! 쿠키에 Refresh token을 저장하고 Access Token을 또 새로 받아와 사용하는 경우 CSRF 공격은 방어 할 수 있습니다. Refresh token 탈취해 서버에 Access Token을 요청해도 응답은 사용자가 받기 때문입니다.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;secure httpOnly cookie 저장 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;브라우저에 쿠키로 저장되는건 같지만 javascript로 접근은 불가능합니다. 오직 https 접속에서만 동작을 하게 됩니다. 따라서 XSS 공격을 방어할 수 있습니다. 또한 Refresh Token Rotation 방식을 사용하면 마찬가지로 CSRF 공격도 방어할 수 있습니다.&lt;/p&gt;
&lt;p&gt;대신 쿠키에 세션 id, Access Token은 저장하면 안됩니다. 또 쿠키 값에 접근은 불가능하지만 XSS의 취약점을 노려 API를 요청하면 쿠키의 값도 함께 보내져 유저인 척 하는 것은 가능할 수 있습니다.&lt;/p&gt;
&lt;h2&gt;🔑 종합적인 결론&lt;/h2&gt;
&lt;p&gt;드디어 결론입니다. 정답은 없는 것 같습니다만 (샤라웃 투 &lt;a href=&quot;https://klloo.github.io/session-jwt/&quot;&gt;klloo&lt;/a&gt;) 저는 &lt;code&gt;secure httpOnly cookie&lt;/code&gt;에 &lt;code&gt;Refresh Token&lt;/code&gt;을 저장해 CSRF 공격을 방어하도록 구현을 하게 될 것 같습니다! 그리고 XSS 취약점에 대한 대응은 클라이언트와 서버에서 추가적으로 구현을 해주어야 할 것 같습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;참고 링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jwt.io/introduction&quot;&gt;https://jwt.io/introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/1QiOXWEbqYQ&quot;&gt;https://youtu.be/1QiOXWEbqYQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://klloo.github.io/session-jwt/&quot;&gt;https://klloo.github.io/session-jwt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.bizspring.co.kr/%ED%85%8C%ED%81%AC/jwt-json-web-token-%EA%B5%AC%EC%A1%B0-%EC%82%AC%EC%9A%A9/&quot;&gt;https://blog.bizspring.co.kr/%ED%85%8C%ED%81%AC/jwt-json-web-token-%EA%B5%AC%EC%A1%B0-%EC%82%AC%EC%9A%A9/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://m.yes24.com/Goods/Detail/15894097&quot;&gt;https://m.yes24.com/Goods/Detail/15894097&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@yaytomato/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0#-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%A2%85%EB%A5%98%EC%99%80-%EB%B3%B4%EC%95%88-%EC%9D%B4%EC%8A%88&quot;&gt;https://velog.io/@yaytomato/프론트에서-안전하게-로그인-처리하기#-브라우저-저장소-종류와-보안-이슈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[☯ Chakra UI로 Gatsby에 다크모드 30초만에 적용하기]]></title><description><![CDATA[안녕하세요. 오늘은 차크라로 다크모드를 설정하는 법에 대해 알아보겠습니다.  사실 30초는 뻥이구요.. 그래도 Chakra UI는 다크모드 설정이 가능한 빌트인 기능 ColorMode가 있어서 굉장히 빨리 구현이 가능 합니다. ㅎㅅㅎ Gatsby…]]></description><link>https://www.dahhong.com/chakra_darkmode/</link><guid isPermaLink="false">https://www.dahhong.com/chakra_darkmode/</guid><pubDate>Sat, 20 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;안녕하세요. 오늘은 차크라로 다크모드를 설정하는 법에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LnzMPM8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;사실 30초는 뻥이구요.. 그래도 Chakra UI는 다크모드 설정이 가능한 빌트인 기능 ColorMode가 있어서 굉장히 빨리 구현이 가능 합니다. ㅎㅅㅎ&lt;/p&gt;
&lt;h4&gt;Gatsby에 차크라 설치하기&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://v2.chakra-ui.com/getting-started/gatsby-guide&quot;&gt;공식 문서&lt;/a&gt; 링크에 들어가서 그대로 따라해주시면 됩니다. 저는 gatsby-starter-blog 테마를 사용하고 있는데요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby-browser.js
gatsby-ssr.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 파일을 건드려주면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gatsby-ssr.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; React &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ChakraProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ColorModeScript &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;@chakra-ui/react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; theme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./src/theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;default

exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onRenderBody&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; setHtmlAttributes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setPreBodyComponents &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setHtmlAttributes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setPreBodyComponents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ColorModeScript&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;initialColorMode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; theme&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initialColorMode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;chakra-ui-no-flash&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;wrapRootElement&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; element &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ChakraProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; theme &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;gatsby-browser.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ChakraProvider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@chakra-ui/react&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; customTheme &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./src/theme&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;wrapRootElement&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; element &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ChakraProvider theme&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;customTheme&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ChakraProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게.. 하란대로 해주었습니다.&lt;/p&gt;
&lt;p&gt;그런데 &lt;code&gt;wrapRootElement&lt;/code&gt;란 무엇일까요?&lt;br&gt;
👉 &lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#wrapRootElement&quot;&gt;문서&lt;/a&gt;를 찾아보니 정체는 Gatsby에서 제공하는 API였습니다. 어플리케이션의 전체를 감싸 context를 전달 할 때 쓰일 수 있다고 합니다. 그것도 모르고 .. 어딜 감싸주라는거야.. 하고 고민했습니다. 쩝. 아직 한참 먼 나.&lt;/p&gt;
&lt;h4&gt;Theme Config 커스텀 하기&lt;/h4&gt;
&lt;p&gt;먼저 Chakra의 defaultTheme을 커스텀을 해줍니다. 고려해야 할 옵션은 2가지 입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;initialColorMode&lt;/code&gt;: 유저가 사이트에 처음 접속했을 때의 모드를 정해줍니다. &lt;code&gt;dark&lt;/code&gt;, &lt;code&gt;light&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt; 중에 하나를 골라서 넘겨주면 됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useSystemColorMode&lt;/code&gt; : &lt;code&gt;boolean&lt;/code&gt; 값을 넘겨주면 됩니다. &lt;code&gt;true&lt;/code&gt; 일 시 차크라는 사용자의 시스템 모드를 상시 확인하여 반응을 하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;theme.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; extendTheme &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@chakra-ui/react&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;initialColorMode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;useSystemColorMode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; theme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;extendTheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; config &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저는 첫 시작은 사용자의 시스템을 따라가고, 그 후부턴 차크라가 더이상 사용자 시스템 모드를 추적하지 않도록 해두었습니다.&lt;/p&gt;
&lt;h4&gt;ColorModeScript 추가해주기&lt;/h4&gt;
&lt;p&gt;다시 &lt;code&gt;gatsby-browser.js&lt;/code&gt;로 돌아가서 스크립트를&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ColorModeScript initialColorMode&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initialColorMode&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;호호호 그럼 이제 절반은 왔습니다. 이제 &lt;code&gt;toggle&lt;/code&gt; 기능을 구현해봅시다.&lt;/p&gt;
&lt;h4&gt;useColorMode 훅 사용하기&lt;/h4&gt;
&lt;p&gt;차크라에서는 현재 ColorMode 값과 토글 기능을 제공하는 훅을 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TtNadzH.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;훅을 사용하여 &lt;code&gt;colorMode&lt;/code&gt;로 현재 ColorMode, 그리고 &lt;code&gt;toggleColorMode&lt;/code&gt;로 토글 함수를 가져옵니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; colorMode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toggleColorMode &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useColorMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;toggleColorMode&lt;/code&gt;을 onClick에 넘겨줍니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;toggleColorMode&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  Toggle &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;colorMode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;light&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Dark&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Light&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;두 코드를 아무데나 붙여 넣어서 확인해봅시다. 저는 아이콘도 추가하고.. 조금 꾸며줬습니다. 아무튼!
&lt;img src=&quot;https://i.imgur.com/u2OFPLk.png&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;https://i.imgur.com/Ka5VVM8.png&quot; alt=&quot;&quot;&gt;
헉!!!!!!!!!!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/vsytmhj.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이정도면 30초 아닐까요? 하하.&lt;br&gt;
이렇게 다크모드 구현을 완료했습니다. 세세한 스타일은 &lt;code&gt;theme.js&lt;/code&gt;를 통해 구현해주면 될 것 같군요.&lt;/p&gt;</content:encoded></item></channel></rss>